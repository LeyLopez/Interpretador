
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftMASMENOSleftPORDIVIDIDOrightUMENOSALTERNATIVA CADENA CONCAT CONDICION DECIMAL DIVIDIDO DURANTE ENTERO EXHIBIR FALSE FINALIZAR ID IGUAL IGUALQUE ITERAR LLAVDER LLAVIZQ MAS MAYQUE MENOS MENQUE NIGUALQUE NUMERO PARDER PARIZQ POR PROCEDIMIENTO PTCOMA REALIZAR TRUEinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccioninstruccion      : exhibir_instr\n    | definicion_instr\n    | asignacion_instr\n    | durante_instr\n    | condicion_instr\n    | alternativa_instr\n    | iterar_instr\n    | realizar_durante_instr\n    | call_procedimiento_instrexhibir_instr     : EXHIBIR PARIZQ expresion PARDER PTCOMAdefinicion_instr   : NUMERO ID PTCOMAasignacion_instr   : ID IGUAL expresion_numerica PTCOMAdurante_instr     : DURANTE PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERcondicion_instr           : CONDICION PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERalternativa_instr      : CONDICION PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ALTERNATIVA LLAVIZQ instrucciones LLAVDERiterar_instr : ITERAR ID IGUAL expresion_numerica FINALIZAR expresion_numerica LLAVIZQ instrucciones LLAVDERrealizar_durante_instr : REALIZAR LLAVIZQ instrucciones LLAVDER DURANTE PARIZQ expresion_logica PARDER PTCOMAdefinicion_instr : PROCEDIMIENTO ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDERcall_procedimiento_instr : ID PARIZQ PARDER PTCOMAexpresion : expresion_numerica\n    | expresion_cadena\n    | expresion_booleanaexpresion_booleana : TRUE\n    | FALSEexpresion_numerica : expresion_numerica MAS expresion_numerica\n    | expresion_numerica MENOS expresion_numerica\n    | expresion_numerica POR expresion_numerica\n    | expresion_numerica DIVIDIDO expresion_numericaexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n    | DECIMALexpresion_numerica   : IDexpresion_cadena     : expresion_cadena CONCAT expresion_cadenaexpresion_cadena     : CADENAexpresion_cadena     : expresion_numericaexpresion_logica : expresion_numerica MAYQUE expresion_numerica\n    | expresion_numerica MENQUE expresion_numerica\n    | expresion_numerica IGUALQUE expresion_numerica\n    | expresion_numerica NIGUALQUE expresion_numerica'
    
_lr_action_items = {'EXHIBIR':([0,2,3,4,5,6,7,8,9,10,11,12,21,30,43,51,60,61,72,79,80,85,88,89,90,93,94,95,96,99,101,102,103,104,105,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,13,-14,13,-15,-22,-13,13,13,13,13,13,13,-21,-16,-17,13,13,13,-19,-20,13,-18,]),'NUMERO':([0,2,3,4,5,6,7,8,9,10,11,12,21,30,43,51,60,61,72,79,80,85,88,89,90,93,94,95,96,99,101,102,103,104,105,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,14,-14,14,-15,-22,-13,14,14,14,14,14,14,-21,-16,-17,14,14,14,-19,-20,14,-18,]),'PROCEDIMIENTO':([0,2,3,4,5,6,7,8,9,10,11,12,21,30,43,51,60,61,72,79,80,85,88,89,90,93,94,95,96,99,101,102,103,104,105,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,16,-14,16,-15,-22,-13,16,16,16,16,16,16,-21,-16,-17,16,16,16,-19,-20,16,-18,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,14,16,19,21,22,24,27,28,30,31,36,43,50,51,54,55,56,57,58,60,61,64,65,66,67,72,79,80,85,86,88,89,90,92,93,94,95,96,99,101,102,103,104,105,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,23,26,29,-2,39,39,39,39,15,39,39,-14,39,15,39,39,39,39,39,-15,-22,39,39,39,39,-13,15,15,15,39,15,15,15,39,-21,-16,-17,15,15,15,-19,-20,15,-18,]),'DURANTE':([0,2,3,4,5,6,7,8,9,10,11,12,21,30,43,51,60,61,70,72,79,80,85,88,89,90,93,94,95,96,99,101,102,103,104,105,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,17,-14,17,-15,-22,87,-13,17,17,17,17,17,17,-21,-16,-17,17,17,17,-19,-20,17,-18,]),'CONDICION':([0,2,3,4,5,6,7,8,9,10,11,12,21,30,43,51,60,61,72,79,80,85,88,89,90,93,94,95,96,99,101,102,103,104,105,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,18,-14,18,-15,-22,-13,18,18,18,18,18,18,-21,-16,-17,18,18,18,-19,-20,18,-18,]),'ITERAR':([0,2,3,4,5,6,7,8,9,10,11,12,21,30,43,51,60,61,72,79,80,85,88,89,90,93,94,95,96,99,101,102,103,104,105,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,19,-14,19,-15,-22,-13,19,19,19,19,19,19,-21,-16,-17,19,19,19,-19,-20,19,-18,]),'REALIZAR':([0,2,3,4,5,6,7,8,9,10,11,12,21,30,43,51,60,61,72,79,80,85,88,89,90,93,94,95,96,99,101,102,103,104,105,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,20,-14,20,-15,-22,-13,20,20,20,20,20,20,-21,-16,-17,20,20,20,-19,-20,20,-18,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,21,43,60,61,72,93,94,95,102,103,105,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-14,-15,-22,-13,-21,-16,-17,-19,-20,-18,]),'LLAVDER':([3,4,5,6,7,8,9,10,11,12,21,43,51,60,61,72,88,89,90,93,94,95,99,102,103,104,105,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-14,70,-15,-22,-13,93,94,95,-21,-16,-17,102,-19,-20,105,-18,]),'PARIZQ':([13,15,17,18,22,24,26,27,28,31,36,50,54,55,56,57,58,64,65,66,67,86,87,92,],[22,25,27,28,31,31,46,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,92,31,]),'IGUAL':([15,29,],[24,50,]),'LLAVIZQ':([20,37,38,39,59,62,63,68,71,73,74,75,76,91,98,],[30,-34,-35,-36,-32,79,80,85,-33,-28,-29,-30,-31,96,101,]),'MENOS':([22,24,27,28,31,33,36,37,38,39,44,48,50,52,54,55,56,57,58,59,64,65,66,67,69,71,73,74,75,76,78,81,82,83,84,86,91,92,],[36,36,36,36,36,55,36,-34,-35,-36,55,55,36,55,36,36,36,36,36,-32,36,36,36,36,55,-33,-28,-29,-30,-31,55,55,55,55,55,36,55,36,]),'ENTERO':([22,24,27,28,31,36,50,54,55,56,57,58,64,65,66,67,86,92,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'DECIMAL':([22,24,27,28,31,36,50,54,55,56,57,58,64,65,66,67,86,92,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'CADENA':([22,58,],[40,40,]),'TRUE':([22,],[41,]),'FALSE':([22,],[42,]),'PTCOMA':([23,37,38,39,44,45,53,59,71,73,74,75,76,100,],[43,-34,-35,-36,60,61,72,-32,-33,-28,-29,-30,-31,103,]),'PARDER':([25,32,33,34,35,37,38,39,40,41,42,46,47,49,52,59,71,73,74,75,76,77,78,81,82,83,84,97,],[45,53,-23,-24,-25,-34,-35,-36,-38,-26,-27,62,63,68,71,-32,-33,-28,-29,-30,-31,-37,-39,-40,-41,-42,-43,100,]),'MAS':([33,37,38,39,44,48,52,59,69,71,73,74,75,76,78,81,82,83,84,91,],[54,-34,-35,-36,54,54,54,-32,54,-33,-28,-29,-30,-31,54,54,54,54,54,54,]),'POR':([33,37,38,39,44,48,52,59,69,71,73,74,75,76,78,81,82,83,84,91,],[56,-34,-35,-36,56,56,56,-32,56,-33,56,56,-30,-31,56,56,56,56,56,56,]),'DIVIDIDO':([33,37,38,39,44,48,52,59,69,71,73,74,75,76,78,81,82,83,84,91,],[57,-34,-35,-36,57,57,57,-32,57,-33,57,57,-30,-31,57,57,57,57,57,57,]),'CONCAT':([33,34,37,38,39,40,59,71,73,74,75,76,77,78,],[-39,58,-34,-35,-36,-38,-32,-33,-28,-29,-30,-31,-37,-39,]),'MAYQUE':([37,38,39,48,59,71,73,74,75,76,],[-34,-35,-36,64,-32,-33,-28,-29,-30,-31,]),'MENQUE':([37,38,39,48,59,71,73,74,75,76,],[-34,-35,-36,65,-32,-33,-28,-29,-30,-31,]),'IGUALQUE':([37,38,39,48,59,71,73,74,75,76,],[-34,-35,-36,66,-32,-33,-28,-29,-30,-31,]),'NIGUALQUE':([37,38,39,48,59,71,73,74,75,76,],[-34,-35,-36,67,-32,-33,-28,-29,-30,-31,]),'FINALIZAR':([37,38,39,59,69,71,73,74,75,76,],[-34,-35,-36,-32,86,-33,-28,-29,-30,-31,]),'ALTERNATIVA':([95,],[98,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,30,79,80,85,96,101,],[2,51,88,89,90,99,104,]),'instruccion':([0,2,30,51,79,80,85,88,89,90,96,99,101,104,],[3,21,3,21,3,3,3,21,21,21,3,21,3,21,]),'exhibir_instr':([0,2,30,51,79,80,85,88,89,90,96,99,101,104,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'definicion_instr':([0,2,30,51,79,80,85,88,89,90,96,99,101,104,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'asignacion_instr':([0,2,30,51,79,80,85,88,89,90,96,99,101,104,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'durante_instr':([0,2,30,51,79,80,85,88,89,90,96,99,101,104,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'condicion_instr':([0,2,30,51,79,80,85,88,89,90,96,99,101,104,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'alternativa_instr':([0,2,30,51,79,80,85,88,89,90,96,99,101,104,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'iterar_instr':([0,2,30,51,79,80,85,88,89,90,96,99,101,104,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'realizar_durante_instr':([0,2,30,51,79,80,85,88,89,90,96,99,101,104,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'call_procedimiento_instr':([0,2,30,51,79,80,85,88,89,90,96,99,101,104,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'expresion':([22,],[32,]),'expresion_numerica':([22,24,27,28,31,36,50,54,55,56,57,58,64,65,66,67,86,92,],[33,44,48,48,52,59,69,73,74,75,76,78,81,82,83,84,91,48,]),'expresion_cadena':([22,58,],[34,77,]),'expresion_booleana':([22,],[35,]),'expresion_logica':([27,28,92,],[47,49,97,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','gramar.py',127),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','gramar.py',132),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','gramar.py',138),
  ('instruccion -> exhibir_instr','instruccion',1,'p_instruccion','gramar.py',143),
  ('instruccion -> definicion_instr','instruccion',1,'p_instruccion','gramar.py',144),
  ('instruccion -> asignacion_instr','instruccion',1,'p_instruccion','gramar.py',145),
  ('instruccion -> durante_instr','instruccion',1,'p_instruccion','gramar.py',146),
  ('instruccion -> condicion_instr','instruccion',1,'p_instruccion','gramar.py',147),
  ('instruccion -> alternativa_instr','instruccion',1,'p_instruccion','gramar.py',148),
  ('instruccion -> iterar_instr','instruccion',1,'p_instruccion','gramar.py',149),
  ('instruccion -> realizar_durante_instr','instruccion',1,'p_instruccion','gramar.py',150),
  ('instruccion -> call_procedimiento_instr','instruccion',1,'p_instruccion','gramar.py',151),
  ('exhibir_instr -> EXHIBIR PARIZQ expresion PARDER PTCOMA','exhibir_instr',5,'p_instruccion_exhibir','gramar.py',156),
  ('definicion_instr -> NUMERO ID PTCOMA','definicion_instr',3,'p_instruccion_definicion','gramar.py',161),
  ('asignacion_instr -> ID IGUAL expresion_numerica PTCOMA','asignacion_instr',4,'p_asignacion_instr','gramar.py',166),
  ('durante_instr -> DURANTE PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','durante_instr',7,'p_durante_instr','gramar.py',171),
  ('condicion_instr -> CONDICION PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','condicion_instr',7,'p_condicion_instr','gramar.py',176),
  ('alternativa_instr -> CONDICION PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ALTERNATIVA LLAVIZQ instrucciones LLAVDER','alternativa_instr',11,'p_alternativa_instr','gramar.py',181),
  ('iterar_instr -> ITERAR ID IGUAL expresion_numerica FINALIZAR expresion_numerica LLAVIZQ instrucciones LLAVDER','iterar_instr',9,'p_iterar_instr','gramar.py',186),
  ('realizar_durante_instr -> REALIZAR LLAVIZQ instrucciones LLAVDER DURANTE PARIZQ expresion_logica PARDER PTCOMA','realizar_durante_instr',9,'p_realizar_durante_instr','gramar.py',191),
  ('definicion_instr -> PROCEDIMIENTO ID PARIZQ PARDER LLAVIZQ instrucciones LLAVDER','definicion_instr',7,'p_definicion_procedimiento','gramar.py',195),
  ('call_procedimiento_instr -> ID PARIZQ PARDER PTCOMA','call_procedimiento_instr',4,'p_call_procedimiento','gramar.py',199),
  ('expresion -> expresion_numerica','expresion',1,'p_expresion','gramar.py',203),
  ('expresion -> expresion_cadena','expresion',1,'p_expresion','gramar.py',204),
  ('expresion -> expresion_booleana','expresion',1,'p_expresion','gramar.py',205),
  ('expresion_booleana -> TRUE','expresion_booleana',1,'p_expresion_booleana','gramar.py',210),
  ('expresion_booleana -> FALSE','expresion_booleana',1,'p_expresion_booleana','gramar.py',211),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramar.py',216),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramar.py',217),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramar.py',218),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramar.py',219),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','gramar.py',231),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','gramar.py',236),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','gramar.py',241),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','gramar.py',242),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','gramar.py',247),
  ('expresion_cadena -> expresion_cadena CONCAT expresion_cadena','expresion_cadena',3,'p_expresion_concatenacion','gramar.py',252),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','gramar.py',257),
  ('expresion_cadena -> expresion_numerica','expresion_cadena',1,'p_expresion_cadena_numerico','gramar.py',262),
  ('expresion_logica -> expresion_numerica MAYQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','gramar.py',267),
  ('expresion_logica -> expresion_numerica MENQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','gramar.py',268),
  ('expresion_logica -> expresion_numerica IGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','gramar.py',269),
  ('expresion_logica -> expresion_numerica NIGUALQUE expresion_numerica','expresion_logica',3,'p_expresion_logica','gramar.py',270),
]
